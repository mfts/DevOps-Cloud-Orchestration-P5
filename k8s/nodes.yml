---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Amazon EKS Worker Nodes
  Marc Seitz
  May 2020
  Guide from https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resources
    Type: String
  SshKey:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  Instances:
    Description: A number of how many node instances should be created
    Type: Number

Resources:
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /
  
  NodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the nodes.
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "kubernetes.io/cluster/UdacityCapstoneMFTS-EKS"
          Value: "owned"
  
  NodesAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Sub ${Instances}
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 4
      VPCZoneIdentifier:
        Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::Sub: ${EnvironmentName}-PUB-NETS
      Tags:
        - Key: "Name"
          Value: "UdacityCapstoneMFTS-EKS-NodeGroup-Node"
          PropagateAtLaunch: 'true'
        - Key: "kubernetes.io/cluster/UdacityCapstoneMFTS-EKS"
          Value: 'owned'
          PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: 3
        PauseTime: 'PT5M'
  
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: ami-01ffee931e45bb6bf
      InstanceType: m3.medium
      KeyName: !Ref SshKey
      SecurityGroups:
      - !Ref NodesSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -o xtrace
          /etc/eks/bootstrap.sh UdacityCapstoneMFTS-EKS
          /opt/aws/bin/cfn-signal --exit-code $? \
            --stack  ${AWS::StackName} \
            --resource NodesAutoScalingGroup  \
            --region ${AWS::Region}

Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
    Export: 
      Name: !Sub ${EnvironmentName}-INSTANCE-ROLE
  NodesSecurityGroup:
    Description: The security group for the nodes.
    Value: !Ref NodesSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-NODE-SG